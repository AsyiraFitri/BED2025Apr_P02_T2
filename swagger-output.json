{
  "swagger": "2.0",
  "info": {
    "title": "EverydayCare API Documentation",
    "version": "1.0.0",
    "description": "Documentation follows the order of: Jing Yin, Xuan Tong, Asyira, Sandi, and Yiru. Each section contains endpoints related to the respective team member's features."
  },
  "tags": [
    { "name": "Community", "description": "Community endpoints" },
    { "name": "Group", "description": "Group endpoints" },
    { "name": "Members", "description": "Group members endpoints" },
    { "name": "Channels", "description": "Channel endpoints" },
    { "name": "ChatMessages", "description": "Chat messages endpoints" },
    { "name": "Events", "description": "Event endpoints" },

    { "name": "Medications", "description": "Medication endpoints" },
    { "name": "MedicationTracker", "description": "Medication tracking endpoints" },
    { "name": "Appointments", "description": "Appointment endpoints" },
    { "name": "Calendar", "description": "Google Calendar integration endpoints" }


  ],
  "host": "localhost:3000",
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Paste your token as: Bearer <your JWT token>"
    }
  },
  "basePath": "/",
  "schemes": ["http"],
  "paths": {
    "/api/hobby-groups": {
      "get": {
        "tags": ["Community"],
        "summary": "Get all community groups",
        "responses": {
          "200": { "description": "A list of community groups" },
          "400": { "description": "Bad request" },
          "500": { "description": "Internal server error" }
        }
      },
      "post": {
        "tags": ["Community"],
        "summary": "Create a new community group",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "groupName": { "type": "string" },
                "groupDescription": { "type": "string" }
              },
              "required": ["groupName", "groupDescription"]
            }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "201": { "description": "Community group created" },
          "400": { "description": "Validation error" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/hobby-groups/{id}": {
      "get": {
        "tags": ["Community"],
        "summary": "Get a community group by ID",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Community group details" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "put": {
        "tags": ["Community"],
        "summary": "Update a community group",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "groupName": { "type": "string" },
                "groupDescription": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Community group updated" },
          "400": { "description": "Validation error" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "delete": {
        "tags": ["Community"],
        "summary": "Delete a community group",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Community group deleted" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/groups": {
      "get": {
        "tags": ["Group"],
        "summary": "Get all groups",
        "responses": {
          "200": { "description": "A list of groups" },
          "400": { "description": "Bad request" },
          "500": { "description": "Internal server error" }
        }
      },
      "post": {
        "tags": ["Group"],
        "summary": "Create a new group",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "groupName": { "type": "string" },
                "groupDescription": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "201": { "description": "Group created" },
          "400": { "description": "Validation error" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/groups/{groupId}": {
      "get": {
        "tags": ["Group"],
        "summary": "Get group by ID",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Group details" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "put": {
        "tags": ["Group"],
        "summary": "Update group",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "groupName": { "type": "string" },
                "groupDescription": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Group updated" },
          "400": { "description": "Validation error" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "delete": {
        "tags": ["Group"],
        "summary": "Delete group",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Group deleted" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/groups/memberList/{groupId}": {
      "get": {
        "tags": ["Members"],
        "summary": "Get all members in a group",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "List of group members" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/groups/memberList/{groupId}/{memberId}": {
      "get": {
        "tags": ["Members"],
        "summary": "Get member details",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "memberId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Member details" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "put": {
        "tags": ["Members"],
        "summary": "Update member role",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "memberId", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "role": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Member updated" },
          "400": { "description": "Validation error" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "delete": {
        "tags": ["Members"],
        "summary": "Remove member from group",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "memberId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Member removed" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/groups/channels/{groupId}": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get all channels in a group",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "List of channels" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "post": {
        "tags": ["Channels"],
        "summary": "Create a channel in a group",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "channelName": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Channel created" },
          "400": { "description": "Validation error" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/groups/channels/{groupId}/{channelName}": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get channel details",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "channelName", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Channel details" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "put": {
        "tags": ["Channels"],
        "summary": "Update channel",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "channelName", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "channelName": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Channel updated" },
          "400": { "description": "Validation error" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "delete": {
        "tags": ["Channels"],
        "summary": "Delete channel",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "channelName", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Channel deleted" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/groups/channels/{groupId}/{channelName}/messages": {
      "get": {
        "tags": ["ChatMessages"],
        "summary": "Get all chat messages in a channel",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "channelName", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "List of chat messages" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "post": {
        "tags": ["ChatMessages"],
        "summary": "Send a chat message",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "channelName", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "text": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Message sent" },
          "400": { "description": "Validation error" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/groups/channels/{groupId}/{channelName}/messages/{messageId}": {
      "get": {
        "tags": ["ChatMessages"],
        "summary": "Get a chat message by ID",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "channelName", "in": "path", "required": true, "type": "string" },
          { "name": "messageId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Chat message details" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "put": {
        "tags": ["ChatMessages"],
        "summary": "Update a chat message",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "channelName", "in": "path", "required": true, "type": "string" },
          { "name": "messageId", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "text": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Chat message updated" },
          "400": { "description": "Validation error" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "delete": {
        "tags": ["ChatMessages"],
        "summary": "Delete a chat message",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "channelName", "in": "path", "required": true, "type": "string" },
          { "name": "messageId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Chat message deleted" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/groups/events/{groupId}": {
      "get": {
        "tags": ["Events"],
        "summary": "Get all events for a group",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "List of events" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "post": {
        "tags": ["Events"],
        "summary": "Create an event for a group",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "description": { "type": "string" },
                "eventDate": { "type": "string" },
                "startTime": { "type": "string" },
                "endTime": { "type": "string" },
                "location": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Event created" },
          "400": { "description": "Validation error" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/groups/events/{groupId}/{eventId}": {
      "get": {
        "tags": ["Events"],
        "summary": "Get event details",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "eventId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Event details" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "put": {
        "tags": ["Events"],
        "summary": "Update event",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "eventId", "in": "path", "required": true, "type": "string" },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": { "type": "string" },
                "description": { "type": "string" },
                "eventDate": { "type": "string" },
                "startTime": { "type": "string" },
                "endTime": { "type": "string" },
                "location": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Event updated" },
          "400": { "description": "Validation error" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "delete": {
        "tags": ["Events"],
        "summary": "Delete event",
        "parameters": [
          { "name": "groupId", "in": "path", "required": true, "type": "string" },
          { "name": "eventId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Event deleted" },
          "404": { "description": "Not found" },
          "500": { "description": "Internal server error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    }
    ,
    "/api/appointments/user": {
      "get": {
        "tags": ["Appointments"],
        "summary": "Get all appointments for the authenticated user (userId from JWT)",
        "responses": {
          "200": {
            "description": "List of appointments",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/Appointment" } }
          },
          "500": { "description": "Failed to fetch appointments" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/appointments/{id}": {
      "get": {
        "tags": ["Appointments"],
        "summary": "Get appointment by ID",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "integer" }
        ],
        "responses": {
          "200": { "description": "Appointment details", "schema": { "$ref": "#/definitions/Appointment" } },
          "404": { "description": "Appointment not found" }
        }
        ,
        "security": [ { "Bearer": [] } ]
      },
      "put": {
        "tags": ["Appointments"],
        "summary": "Update appointment",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "integer" },
          { "in": "body", "name": "body", "required": true, "schema": { "$ref": "#/definitions/AppointmentInput" } }
        ],
        "responses": {
          "200": { "description": "Appointment updated" },
          "400": { "description": "Validation error" }
        }
        ,
        "security": [ { "Bearer": [] } ]
      },
      "delete": {
        "tags": ["Appointments"],
        "summary": "Delete appointment",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "integer" }
        ],
        "responses": {
          "200": { "description": "Appointment deleted" },
          "404": { "description": "Appointment not found" }
        }
        ,
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/appointments": {
      "post": {
        "tags": ["Appointments"],
        "summary": "Create appointment",
        "parameters": [
          { "in": "body", "name": "body", "required": true, "schema": { "$ref": "#/definitions/AppointmentInput" } }
        ],
        "responses": {
          "201": { "description": "Appointment created" },
          "400": { "description": "Validation error" }
        }
        ,
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/calendar/auth/google": {
      "get": {
        "tags": ["Calendar"],
        "summary": "Initiate Google OAuth login flow",
        "responses": {
          "302": { "description": "Redirect to Google OAuth" }
        }
      }
    },
    "/api/calendar/auth/google/callback": {
      "get": {
        "tags": ["Calendar"],
        "summary": "Handle Google OAuth callback",
        "responses": {
          "302": { "description": "Redirect to frontend with tokens" },
          "500": { "description": "Google authentication failed" }
        }
      }
    },
    "/api/calendar/google/sync": {
      "post": {
        "tags": ["Calendar"],
        "summary": "Sync all appointments to Google Calendar",
        "parameters": [
          { "in": "body", "name": "body", "required": true, "schema": { "$ref": "#/definitions/GoogleCalendarSyncInput" } }
        ],
        "responses": {
          "200": { "description": "Event created/updated in Google Calendar" },
          "401": { "description": "Missing access token" },
          "500": { "description": "Google Calendar sync failed" }
        }
      }
    },
    "/api/calendar/google/sync/{eventId}": {
      "put": {
        "tags": ["Calendar"],
        "summary": "Edit Google Calendar event",
        "parameters": [
          { "name": "eventId", "in": "path", "required": true, "type": "string" },
          { "in": "body", "name": "body", "required": true, "schema": { "$ref": "#/definitions/GoogleCalendarSyncInput" } }
        ],
        "responses": {
          "200": { "description": "Event updated in Google Calendar" },
          "401": { "description": "Missing access token" },
          "500": { "description": "Google Calendar update failed" }
        }
      },
      "delete": {
        "tags": ["Calendar"],
        "summary": "Delete Google Calendar event",
        "parameters": [
          { "name": "eventId", "in": "path", "required": true, "type": "string" }
        ],
        "responses": {
          "200": { "description": "Event deleted from Google Calendar" },
          "401": { "description": "Missing access token" },
          "404": { "description": "Event not found" },
          "500": { "description": "Google Calendar deletion failed" }
        }
      }
    }
    ,
    "/api/medications/user": {
      "get": {
        "tags": ["Medications"],
        "summary": "Get all medications for the authenticated user (userId from JWT)",
        "responses": {
          "200": {
            "description": "List of medications",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/Medication" } }
          },
          "500": { "description": "Failed to fetch medications" }
        },
        "security": [ { "Bearer": [] } ]
      },
      "post": {
        "tags": ["Medications"],
        "summary": "Create a medication",
        "parameters": [
          { "in": "body", "name": "body", "required": true, "schema": { "$ref": "#/definitions/MedicationInput" } }
        ],
        "responses": {
          "201": { "description": "Medication created" },
          "400": { "description": "Validation error" }
        }
        ,
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/medications/{id}": {
      "get": {
        "tags": ["Medications"],
        "summary": "Get medication by ID",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "integer" }
        ],
        "responses": {
          "200": { "description": "Medication details", "schema": { "$ref": "#/definitions/Medication" } },
          "404": { "description": "Medication not found" }
        }
        ,
        "security": [ { "Bearer": [] } ]
      },
      "put": {
        "tags": ["Medications"],
        "summary": "Update medication",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "integer" },
          { "in": "body", "name": "body", "required": true, "schema": { "$ref": "#/definitions/MedicationInput" } }
        ],
        "responses": {
          "200": { "description": "Medication updated" },
          "400": { "description": "Validation error" }
        }
        ,
        "security": [ { "Bearer": [] } ]
      },
      "delete": {
        "tags": ["Medications"],
        "summary": "Delete medication",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "type": "integer" }
        ],
        "responses": {
          "200": { "description": "Medication deleted" },
          "404": { "description": "Medication not found" }
        }
        ,
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/medications/schedules/user": {
      "get": {
        "tags": ["Medications"],
        "summary": "Get all medication schedules (with checkbox state) for the authenticated user (userId from JWT)",
        "responses": {
          "200": {
            "description": "List of medication schedules",
            "schema": { "type": "array", "items": { "$ref": "#/definitions/MedicationSchedule" } }
          },
          "500": { "description": "Failed to fetch medication schedules" }
        },
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/medications/tracking/reset": {
      "post": {
        "tags": ["MedicationTracker"],
        "summary": "Reset all medication tracking (admin/testing)",
        "responses": {
          "200": { "description": "All medication tracking reset" }
        }
        ,
        "security": [ { "Bearer": [] } ]
      }
    },
    "/api/medications/tracking/save": {
      "post": {
        "tags": ["MedicationTracker"],
        "summary": "Save medication tracking state for the user",
        "parameters": [
          { "in": "body", "name": "body", "required": true, "schema": { "$ref": "#/definitions/MedicationTrackingInput" } }
        ],
        "responses": {
          "200": { "description": "Tracking state saved" },
          "400": { "description": "Validation error" }
        },
        "security": [ { "Bearer": [] } ]
      }
    }
  }
}